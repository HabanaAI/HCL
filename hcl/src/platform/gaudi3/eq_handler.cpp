#include "platform/gaudi3/eq_handler.h"

static char errorCauseQPCStrings[][8][64] = {
    {
        "[req DB] QP not valid",
        "[req DB] ASID not valid",
        "[req DB] security check",
        "[req DB] (PI - CI) > last-index",
        "[req DB] wq-type is READ",
    },
    {
        "[patcher DB] QP not valid",
        "[patcher DB] ASID not valid",
        "[patcher DB] security check",
    },
    {
        "[CC DB] QP not valid",
        "[CC DB] ASID not valid",
        "[CC DB] security check",
    },
    {
        "[res TX] QP not valid",
    },
    {
        "[res RX] max-retry-cnt exceeded",
    },
    {
        "[req TX] QP not valid",
        "[req TX] RDV WQE but wq-type is not WRITE",
    },
    {
        "[req RX] QP not valid",
        "[req RX] max-retry-cnt exceeded",
        "[TMR] max-retry-cnt exceeded",
    },
    {
        "[req RDV] QP not valid",
        "[req RDV] wrong wq-type",
    },
};

static char errorCauseRXStrings[][64] = {
    "PKT bad format",
    "PKT parser FSM invalid",
    "PKT HDR size invalid",
    "PKT IPv4-len invalid",
    "PKT IPv6-len invalid",
    "PKT tunnel invalid",
    "PKT parser hint invalid",
    "PKT BTH opcode invalid",
    "PKT syndrome invalid",
    "PKT RC max size invalid",
    "PKT RC min size invalid",
    "PKT Raw invalid",
    "PKT Raw size invalid",
    "PKT Raw min size invalid",
    "PKT Raw max size invalid",
    "QPC QP invalid",
    "QPC Transport Service mismatch",
    "QPC Requester connection state invalid",
    "QPC Responder Connection state invalid",
    "QPC Responder resync invalid",
    "QPC Requester PSN invalid",
    "QPC Requester PSN unset",
    "QPC Requester SAL NTS invalid",
    "QPC Responder RKEY invalid",
    "QPC Requester SAL PSN invalid",
    "WQE index mismatch",
    "WQE write opcode invalid",
    "WQE Rendezvous opcode invalid",
    "WQE Read opcode invalid",
    "WQE Write Zero",
    "WQE multi zero",
    "WQE Write send big",
    "WQE multi big",
};

static char errorCauseTXStrings[][128] = {
    "QPC.wq_type is write does not support WQE.opcode",
    "QPC.wq_type is rendezvous does not support WQE.opcode",
    "QPC.wq_type is read does not support WQE.opcode",
    "WQE is inline but does not support WQE.opcode",
    "WQE.opcode is write but WQE.size is 0",
    "WQE.opcode is multi-stride|local-stride|multi-dual but WQE.size is 0",
    "WQE.opcode is send but WQE.size is 0",
    "WQE.opcode is rendezvous-write|rendezvous-read but WQE.size is 0",
    "WQE.opcode is write but size > configured max-write-send-size",
    "WQE.opcode is multi-stride|local-stride|multi-dual but size > configured max-stride-size",
    "WQE.opcode is rendezvous-write|rendezvous-read but QPC.remote_wq_log_size <= configured min-remote-log-size",
    "WQE.opcode is rendezvous-write but WQE.size != configured rdv-wqe-size (per granularity)",
    "WQE.opcode is rendezvous-read but WQE.size != configured rdv-wqe-size (per granularity)",
    "WQE.inline is set but WQE.size != configured inline-wqe-size (per granularity)",
    "WQE.opcode is multi-stride|local-stride|multi-dual but QPC.swq_granularity is 0",
    "QP-RAW and not compression nor down/up-convert",
    "WQE.opcode is multi-stride|local-stride|multi-dual but WQE.size < stride-size",
    "Upscale with unaligned remote address",
    "WQE.reduction_opcode is upscale but does not support WQE.opcode",
    "RAW packet but WQE.size not supported",
    "QP-SACK with WQE NOP",
    "QP-RAW with non-linear WQE opcode",
    "Wrong opcode for QP-plain-RDMA",
    "QP-plain RDMA with up/down-convert",
    "Down/up-convert with non 4B align size/address/stride",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "N/A",
    "WQE's sent bytes exceeds WQE's size",
    "QPC WQ-log-size below cfg",
    "QPC WQ-log-size above cfg",
    "QP-RAW with WQE size above cfg",
    "QP-RAW with WQE size below cfg",
    "WQE.opcode is RD-RDV but WQE.inline is set",
    "WQE fetch&add WR size not 0",
    "WQE fetch&add WR addr not mod4",
    "WQE.opcode above 15",
    "WQE bad opcode",
    "WQE bad size",
    "Tunnel 0-size",
    "Tunnel max size",
};

void Gaudi3EventQueueHandler::parseQpErrorParams(uint32_t ev_data, uint8_t& source, uint8_t& cause, uint8_t& qpcSource)
{
    cause     = ev_data & 0x7f;
    qpcSource = (ev_data >> 7) & 0x7;
    /* The error source by default is QPC */
    source = 1;
    if ((qpcSource == 4) || (qpcSource == 6))
    {
        /* The error source is RX. now check if it generated by RXE or QPC */
        if (cause < 64) source = 0;
        else
            cause -= 64;
    }
    else if (qpcSource == 5)
    {
        /* The error source is TX. now check if it generated by TXE or QPC */
        if (cause < 64) source = 2;
        else
            cause -= 64;
    }
}

char* Gaudi3EventQueueHandler::getErrorCauseRXStrings(uint8_t errorCause)
{
    return errorCauseRXStrings[errorCause];
}

char* Gaudi3EventQueueHandler::getErrorCauseQPCStrings(uint8_t errorCause, uint8_t errorQpcSource)
{
    return errorCauseQPCStrings[errorQpcSource][errorCause];
}

char* Gaudi3EventQueueHandler::getErrorCauseTXStrings(uint8_t errorCause)
{
    return errorCauseTXStrings[errorCause];
}